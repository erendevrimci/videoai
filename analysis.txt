# VideoAI Project - Comprehensive Analysis

## English Analysis

VideoAI is an automated YouTube content generation system that creates AI-themed videos across multiple channels. The process is fully automated from script generation to YouTube upload.

### Core Components

1. **Script Generation (write_script.py)**
   - Uses Together AI's DeepSeek-R1 model to generate engaging scripts about AI topics
   - Reads context from "memory.txt" and trending AI news from "grounding.txt"
   - Topics come from "next_topics.txt" (currently focused on "Grok 3")
   - Generates clickbait-style scripts with controversial/fear-based narratives
   - Cleans scripts for text-to-speech compatibility
   - Tracks covered topics in "science_topics_covered.json"
   - Generates 1000-2000 word scripts with novel opinions and insights
   - Avoids overly dramatic language while still maintaining engagement

2. **Voice Generation (voice_over.py)**
   - Converts scripts to speech using ElevenLabs API
   - Uses different voice IDs for each of the three YouTube channels
   - Configures voice parameters (stability=0.35, similarity_boost=0.55, style=0.1)
   - Outputs MP3 files at 44.1 kHz, 128 kbps quality
   - Uses the "eleven_multilingual_v2" model for voice synthesis

3. **Caption Generation (captions.py)**
   - Uses OpenAI's Whisper API to transcribe voice-over audio
   - Generates SRT subtitle files for video embedding
   - Implements error handling for transcription failures
   - Creates time-synced captions automatically

4. **Video Editing (video_edit.py)**
   - Matches stock clips to script content using OpenAI's o3-mini model
   - Sequences clips based on voice timing from SRT file
   - Uses ffmpeg to assemble final video with dynamic clip transitions
   - Adds background music with lower volume (10%) under voice-over (140%)
   - Burns in subtitles with a semi-transparent background
   - Implements clip validation to ensure proper timing
   - Uses sophisticated algorithms to avoid repeating the same clip segments
   - Enforces maximum clip duration of 10 seconds for faster-paced edits

5. **Title/Description Generation (write_title_desc.py)**
   - Uses Google's Gemini Flash model to generate clickbait titles
   - Creates SEO-optimized descriptions for maximum engagement
   - Saves results to "youtube_info.json"
   - Focuses on fear-based, dramatic titles mentioning well-known entities
   - Ensures titles are under 75 characters
   - Adds "Like & Subscribe for more!" to all descriptions

6. **Video Upload (upload_video.py)**
   - Handles authentication for three separate YouTube channels
   - Uploads videos with generated titles, descriptions, and tags
   - Selects appropriate thumbnails using Gemini AI
   - Tracks recently used thumbnails to avoid repetition
   - Uses YouTube Data API for uploading
   - Handles token refreshing and authentication persistence
   - Manages channel-specific authentication credentials

7. **Topic Generation (brainstorm_topics.py)**
   - Generates new video topic ideas using DeepSeek-R1
   - Focuses on fear-based AI narratives mentioning well-known entities
   - Avoids repeating previously covered topics
   - Draws from trending context to ensure relevance
   - Prefers ideas related to major AI labs, companies or individuals
   - Formats ideas as questions (e.g., "What if...", "Could...", "Can...")

### Workflow Orchestration

The main.py script orchestrates the entire pipeline, running through all steps for each of three channels:
1. Generate script
2. Create voice-over audio with channel-specific voice
3. Generate captions from audio
4. Edit and assemble video
5. Generate title and description
6. Upload to YouTube
7. Archive completed files with channel-specific naming

The system implements a 60-second delay between processing channels to avoid API rate limits. After processing all three channels, the final videos and associated files are renamed with channel-specific identifiers for archiving.

### Project Structure
- Python scripts for each component
- Context files (grounding.txt, memory.txt) for AI input
- Topic lists (next_topics.txt, science_topics_covered.json)
- Media directories for clips and thumbnails with metadata
- Configuration files for API keys and authentication
- Output files for scripts, audio, and video

### Technical Implementation
- Leverages multiple AI APIs (Together, ElevenLabs, OpenAI, Google Gemini)
- Uses Python with libraries like ffmpeg, moviepy, and Google API clients
- Implements error handling and validation throughout the pipeline
- Uses structured data models with Pydantic
- Follows modern Python practices with type hints and docstrings

The system is designed to produce multiple clickbait AI videos daily with minimal human intervention, optimized for engagement through fear-based narratives about AI developments.

## Turkish Analysis (Türkçe Analiz)

VideoAI, çeşitli YouTube kanallarında yapay zeka temalı videolar oluşturan otomatik bir içerik üretim sistemidir. Süreç, senaryo oluşturmadan YouTube'a yüklemeye kadar tamamen otomatikleştirilmiştir.

### Temel Bileşenler

1. **Senaryo Oluşturma (write_script.py)**
   - Yapay zeka konuları hakkında ilgi çekici senaryolar oluşturmak için Together AI'nin DeepSeek-R1 modelini kullanır
   - "memory.txt" dosyasından bağlam ve "grounding.txt" dosyasından güncel yapay zeka haberlerini okur
   - Konular "next_topics.txt" dosyasından gelir 
   - Tartışmalı/korku temelli anlatılarla tıklama tuzağı tarzı senaryolar oluşturur
   - Senaryoları metin-konuşma uyumluluğu için temizler
   - İşlenen konuları "topics_covered.json" dosyasında takip eder
   - 1000-2000 kelimelik, özgün görüşler ve içgörüler içeren senaryolar oluşturur
   - İlgi çekiciliği korurken aşırı dramatik dilden kaçınır

2. **Ses Oluşturma (voice_over.py)**
   - Senaryoları ElevenLabs API kullanarak konuşmaya dönüştürür
   - Üç YouTube kanalının her biri için farklı ses kimlikleri kullanır
   - Ses parametrelerini yapılandırır (stability=0.35, similarity_boost=0.55, style=0.1)
   - 44.1 kHz, 128 kbps kalitesinde MP3 dosyaları çıkarır
   - Ses sentezi için "eleven_multilingual_v2" modelini kullanır

3. **Altyazı Oluşturma (captions.py)**
   - Seslendirme ses dosyasını dönüştürmek için OpenAI'nin Whisper API'sini kullanır
   - Video yerleştirme için SRT altyazı dosyaları oluşturur
   - Transkripsiyon hataları için hata yönetimi uygular
   - Zamanla senkronize edilmiş altyazıları otomatik olarak oluşturur

4. **Video Düzenleme (video_edit.py)**
   - OpenAI'nin o3-mini modelini kullanarak senaryo içeriğiyle stok klipleri eşleştirir
   - SRT dosyasındaki ses zamanlamasına göre klipleri sıralar
   - Dinamik klip geçişleri ile final videoyu birleştirmek için ffmpeg kullanır
   - Seslendirmenin altına (%140) daha düşük ses seviyesiyle (%10) arka plan müziği ekler
   - Yarı saydam arka plana sahip altyazıları videoya kazır
   - Uygun zamanlamayı sağlamak için klip doğrulaması uygular
   - Aynı klip segmentlerinin tekrarını önlemek için sofistike algoritmalar kullanır
   - Daha hızlı tempolu düzenlemeler için maksimum 10 saniyelik klip süresi uygular

5. **Başlık/Açıklama Oluşturma (write_title_desc.py)**
   - Tıklama tuzağı başlıkları oluşturmak için Google'ın Gemini Flash modelini kullanır
   - Maksimum etkileşim için SEO odaklı açıklamalar oluşturur
   - Sonuçları "youtube_info.json" dosyasına kaydeder
   - Tanınmış varlıklardan bahseden korku temelli, dramatik başlıklara odaklanır
   - Başlıkların 75 karakterden az olmasını sağlar
   - Tüm açıklamalara "Like & Subscribe for more!" ekler

6. **Video Yükleme (upload_video.py)**
   - Üç ayrı YouTube kanalı için kimlik doğrulama işlemlerini yönetir
   - Videoları oluşturulan başlıklar, açıklamalar ve etiketlerle yükler
   - Gemini AI kullanarak uygun küçük resimleri seçer
   - Yakın zamanda kullanılan küçük resimleri tekrarlamamak için takip eder
   - Yükleme için YouTube Data API'yi kullanır
   - Token yenileme ve kimlik doğrulama kalıcılığını yönetir
   - Kanala özgü kimlik doğrulama bilgilerini yönetir

7. **Konu Oluşturma (brainstorm_topics.py)**
   - DeepSeek-R1 kullanarak yeni video konu fikirleri oluşturur
   - Tanınmış varlıklardan bahseden korku temelli yapay zeka anlatılarına odaklanır
   - Daha önce işlenen konuları tekrarlamaktan kaçınır
   - Güncelliği sağlamak için güncel bağlam kaynaklarından yararlanır
   - Büyük yapay zeka laboratuvarları, şirketler veya bireylerle ilgili fikirleri tercih eder
   - Fikirleri soru formatında (örn., "Ya şöyle olursa...", "Acaba...", "Olabilir mi...") düzenler

### İş Akışı Orkestrasyonu

main.py betiği tüm süreci yöneterek, üç kanalın her biri için tüm adımları çalıştırır:
1. Senaryo oluştur
2. Kanala özgü sesle seslendirme oluştur
3. Ses dosyasından altyazılar oluştur
4. Video düzenle ve birleştir
5. Başlık ve açıklama oluştur
6. YouTube'a yükle
7. Tamamlanan dosyaları kanala özgü isimlerle arşivle

Sistem, API oran sınırlamalarını aşmamak için kanalların işlenmesi arasında 60 saniyelik bir gecikme uygular. Üç kanalın tümü işlendikten sonra, final videolar ve ilişkili dosyalar arşivleme için kanala özgü tanımlayıcılarla yeniden adlandırılır.

### Proje Yapısı
- Her bileşen için Python betikleri
- Yapay zeka girdisi için bağlam dosyaları (grounding.txt, memory.txt)
- Konu listeleri (next_topics.txt, science_topics_covered.json)
- Klipler ve küçük resimler için metadata içeren medya dizinleri
- API anahtarları ve kimlik doğrulama için yapılandırma dosyaları
- Senaryolar, ses ve video için çıktı dosyaları

### Teknik Uygulama
- Çoklu yapay zeka API'lerinden yararlanır (Together, ElevenLabs, OpenAI, Google Gemini)
- ffmpeg, moviepy ve Google API istemcileri gibi kütüphanelerle Python kullanır
- Tüm iş akışı boyunca hata yönetimi ve doğrulama uygular
- Pydantic ile yapılandırılmış veri modelleri kullanır
- Tür ipuçları ve dokümantasyon dizeleriyle modern Python uygulamalarını takip eder

Sistem, minimal insan müdahalesiyle günlük olarak çoklu tıklama tuzağı yapay zeka videoları üretmek üzere tasarlanmıştır ve yapay zeka gelişmeleri hakkında korku temelli anlatılarla etkileşimi optimize eder.

## Project Visualization

                  +-------------------+
                  |      main.py      |
                  | (Orchestration)   |
                  +--------+----------+
                           |
           +---------------+---------------+
           |               |               |
+----------v-----+ +-------v------+ +------v-------+
| Channel 1      | | Channel 2    | | Channel 3    |
+----------+-----+ +-------+------+ +------+-------+
           |               |               |
           +---------------+---------------+
                           |
                 +---------v----------+
                 | write_script.py    |
                 | (DeepSeek-R1)      |<----+
                 +---------+----------+     |
                           |                |
                 +---------v----------+     |
                 | voice_over.py      |     |
                 | (ElevenLabs)       |     |
                 +---------+----------+     |
                           |                |
                 +---------v----------+     |
                 | captions.py        |     |
                 | (OpenAI Whisper)   |     |
                 +---------+----------+     |
                           |                |
                 +---------v----------+     |
                 | video_edit.py      |     |
                 | (ffmpeg, o3-mini)  |     |
                 +---------+----------+     |
                           |                |
                 +---------v----------+     |
                 | write_title_desc.py|     |
                 | (Gemini)           |     |
                 +---------+----------+     |
                           |                |
                 +---------v----------+     |
                 | upload_video.py    |     |
                 | (YouTube API)      |     |
                 +---------+----------+     |
                           |                |
                 +---------v----------+     |
                 | brainstorm_topics.py     |
                 | (DeepSeek-R1)      |-----+
                 +--------------------+

Input Files:
- context/memory.txt: Knowledge base for AI landscape
- context/grounding.txt: Latest AI news and trends
- next_topics.txt: Topics for next videos
- amazing_script.txt: Example of good script style
- science_topics_covered.json: Previously covered topics

Media Files:
- clips/: Stock video clips with metadata in clips_label.md
- thumbnails/: Thumbnail images with metadata in thumbnail_labels.md
- background_music/: MP3 files for video background

Output Files:
- generated_script.txt: AI-generated script
- voice/generated_voice.mp3: ElevenLabs voice output
- generated_voice.srt: Whisper-generated captions
- output_video.mp4: Raw video without audio
- final_output.mp4: Video with voice-over and music
- final_output_with_subtitles.mp4: Final video with burned-in subtitles
- youtube_info.json: Generated title and description
- final_output_channel{N}.mp4: Archived final videos per channel
- script_channel{N}.txt: Archived scripts per channel
- youtube_info_channel{N}.json: Archived metadata per channel

API Integration:
- Together AI: Script and topic generation
- ElevenLabs: Voice synthesis
- OpenAI: Whisper (transcription), o3-mini (video editing)
- Google Gemini: Title/description generation, thumbnail selection
- YouTube Data API: Video uploads and management

---

2. Create a file manager class for consistent file operations
  3. Implement a CLI for managing configuration settings
  4. Add progress tracking and logging

2. Create a file manager class for consistent file operations
  3. Test the complete pipeline with the new configuration
  4. Further enhance error handling and logging

 1. Test the complete pipeline with our updated modules
  2. Consider implementing a file manager class for even more consistent file operations
  3. Enhance error reporting with a centralized logging system
  4. Add more detailed documentation for each module
  5. Create unit tests for critical functions

1. Implement FileManager in actual project modules, starting with voice_over.py
  2. Update config.py to use FileManager as the foundation for path operations
  3. Create more examples for other modules
  4. Run tests to ensure functionality
  5. Enhance error reporting with a centralized logging system, also add logging functionality to FileManager for better error reporting

- Test a full pipeline run to ensure all modules work together correctly
  - Potentially refactor other utility modules not yet identified
  - Add more input validation for path handling
  - Consider adding logging capabilities to FileManager
  - Update documentation to reflect the new FileManager integration